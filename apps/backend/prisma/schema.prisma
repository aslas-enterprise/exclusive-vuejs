// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String
  password        String
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  verificationCodes VerificationCode[]
  passwordResets    PasswordReset[]
  reviews          Review[]
  favorites        Favorite[]
  ratings          Rating[]

  @@map("users")
}

model VerificationCode {
  id        String   @id @default(cuid())
  userId    String
  email     String
  code      String
  type      String   // 'email_verification'
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_codes")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  email     String
  token     String   @unique
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  image       String?
  icon        String?  // Icon field for categories
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subcategories Subcategory[]
  items         Item[]

  @@map("categories")
}

model Subcategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  image       String?
  icon        String?  // Icon field for subcategories
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  items    Item[]

  @@map("subcategories")
}

model Item {
  id            String   @id @default(cuid())
  name          String
  description  String?
  sku           String?  @unique
  isActive      Boolean  @default(true)
  isFeatured    Boolean  @default(false)
  sortOrder     Int      @default(0)
  categoryId    String?
  subcategoryId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  category    Category?    @relation(fields: [categoryId], references: [id])
  subcategory Subcategory? @relation(fields: [subcategoryId], references: [id])
  prices      Price[]
  stock       Stock?
  images      ItemImage[]
                reviews     Review[]
              ratings     Rating[]
              favorites   Favorite[]
              flashSaleItems FlashSaleItem[]

  @@map("items")
}

model Price {
  id        String   @id @default(cuid())
  itemId    String
  price     Decimal  @db.Decimal(10, 2)
  salePrice Decimal? @db.Decimal(10, 2)
  currency  String   @default("USD")
  isActive  Boolean  @default(true)
  validFrom DateTime @default(now())
  validTo   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("prices")
}

model Stock {
  id            String   @id @default(cuid())
  itemId        String   @unique
  quantity      Int      @default(0)
  reserved      Int      @default(0)
  minThreshold  Int      @default(5)
  maxThreshold  Int?
  isInStock     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("stock")
}

model ItemImage {
  id        String   @id @default(cuid())
  itemId    String
  url       String
  altText   String?
  isPrimary Boolean  @default(false)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("item_images")
}

model Review {
  id        String   @id @default(cuid())
  itemId    String
  userId    String
  title     String?
  content   String
  rating    Int      // 1-5 stars
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([itemId, userId])
  @@map("reviews")
}

model Rating {
  id        String   @id @default(cuid())
  itemId    String
  userId    String
  rating    Int      // 1-5 stars
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([itemId, userId])
  @@map("ratings")
}

model Favorite {
  id        String   @id @default(cuid())
  itemId    String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([itemId, userId])
  @@map("favorites")
}

model FlashSale {
  id          String   @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  discount    Int      // Percentage discount
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  items FlashSaleItem[]

  @@map("flash_sales")
}

model FlashSaleItem {
  id          String   @id @default(cuid())
  flashSaleId String
  itemId      String
  salePrice   Decimal  @db.Decimal(10, 2)
  originalPrice Decimal @db.Decimal(10, 2)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  flashSale FlashSale @relation(fields: [flashSaleId], references: [id], onDelete: Cascade)
  item      Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([flashSaleId, itemId])
  @@map("flash_sale_items")
}
